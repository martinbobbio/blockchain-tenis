# Ganache seed --> 777
from random import randrange
from web3 import Web3
import matplotlib.pyplot as plt
import sys
import names
#Connection to ganache-cli
w3 = Web3(Web3.HTTPProvider('http://localhost:8545'))
#Address (Organizador del torneo)
address = w3.eth.accounts[0]
#Clave privada generada
private_key = '0x89509d53cb5b39a7d275cc446d3df34cfd31dfb5f39ca2e109a50eecf69a4d6f'
#Byte del contrato
byteCode = '0x' + ''
#Abi del contrato
abi = '[{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":true,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getPlayerById","outputs":[{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"string","name":"","type":"string"},{"internalType":"string","name":"","type":"string"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"int256","name":"","type":"int256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPlayersLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"age","type":"uint256"},{"internalType":"string","name":"skill_hand","type":"string"},{"internalType":"string","name":"backhand_type","type":"string"}],"name":"registerPlayer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"player_win_id","type":"uint256"},{"internalType":"uint256","name":"player_win_aces","type":"uint256"},{"internalType":"uint256","name":"player_win_winners","type":"uint256"},{"internalType":"uint256","name":"player_win_double_faults","type":"uint256"},{"internalType":"uint256","name":"player_win_unforce_error","type":"uint256"},{"internalType":"uint256","name":"player_loss_id","type":"uint256"},{"internalType":"uint256","name":"player_loss_aces","type":"uint256"},{"internalType":"uint256","name":"player_loss_winners","type":"uint256"},{"internalType":"uint256","name":"player_loss_double_faults","type":"uint256"},{"internalType":"uint256","name":"player_loss_unforce_error","type":"uint256"}],"name":"setMatchAdvanced","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"player_win_id","type":"uint256"},{"internalType":"uint256","name":"player_loss_id","type":"uint256"}],"name":"setMatchBasic","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"uint256","name":"player_win_id","type":"uint256"},{"internalType":"uint256","name":"player_win_aces","type":"uint256"},{"internalType":"uint256","name":"player_win_winners","type":"uint256"},{"internalType":"uint256","name":"player_loss_id","type":"uint256"},{"internalType":"uint256","name":"player_loss_aces","type":"uint256"},{"internalType":"uint256","name":"player_loss_winners","type":"uint256"}],"name":"setMatchIntermediate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]'

count_matchs = 10
count_players = 20
players = []

if(sys.argv[1]):
    arg_array = sys.argv[1].strip('--').split('=')
    if arg_array[0] == 'matchs': count_matchs = int(arg_array[1])
    if arg_array[0] == 'players': count_players = int(arg_array[1])

if(sys.argv[2]):
    arg_array = sys.argv[2].strip('--').split('=')
    if arg_array[0] == 'matchs': count_matchs = int(arg_array[1])
    if arg_array[0] == 'players': count_players = int(arg_array[1])

#Config SmartContract
configContract = dict(
    nonce = w3.eth.getTransactionCount(address),
    gasPrice = w3.eth.gasPrice,
    gas = w3.eth.estimateGas(dict(data = byteCode)),
    data = byteCode
)

signed = w3.eth.account.sign_transaction(configContract, private_key)
transaction = w3.eth.sendRawTransaction(signed.rawTransaction)

contract_address = w3.toChecksumAddress('0x4bb0ec90ce7d606059eb0ee2f09e979efd1e6345')
smartContract = w3.eth.contract(address=contract_address, abi=abi)

def getRandomPlayers():
    name = names.get_full_name(gender='male')
    age = randrange(18, 45)
    hand = 'Derecho'
    backhand_type = 'Revés a dos manos'
    identificator = smartContract.functions.getPlayersLength().call()
    if randrange(3) == 2: hand = 'Zurdo'
    if randrange(3) == 2: backhand_type = 'Revés a una mano'
    return (identificator, name, age, hand, backhand_type)

def getRandomStats():
    count = smartContract.functions.getPlayersLength().call()
    id_win = randrange(0, count)
    id_loss = randrange(0, count)
    while id_win is id_loss: id_loss = randrange(0, count)
    return (id_win,randrange(10), randrange(20), randrange(5), randrange(8), 
    id_loss, randrange(5), randrange(10), randrange(10), randrange(16))

def initSimulation():
    for p in range(count_players):
        p = getRandomPlayers()
        smartContract.functions.registerPlayer(*p).transact({'from' : address})
        p = smartContract.functions.getPlayerById(p[0]).call()
        players.append(p)
        print("Se cargo el jugador a la blockchain:",p[0],'con',p[1],'años de edad y es', p[2])
        
    for m in range(count_matchs):
        m = getRandomStats()
        winner = smartContract.functions.getPlayerById(m[0]).call()[0]
        losser = smartContract.functions.getPlayerById(m[5]).call()[0]
        smartContract.functions.setMatchAdvanced(*m).transact({'from' : address})
        print("Se cargo el partido a la blockchain:",winner,"(",m[1],"aces /",m[2],"winners /",m[3],"dobles faltas /",m[4],"errores no forzados)","le ganó a",losser,"(",m[6],"aces /",m[7],"winners /",m[8],"dobles faltas /",m[9],"errores no forzados)")

def loadPlayers():
    players = []
    for p in range(count_players):
        p = smartContract.functions.getPlayerById(p).call()
        players.append(p)
    return players

def checkTournaments():
    players = loadPlayers()
    tournaments = [
        {"name":"Torneo pequeño","min_points":50,"max_points":75},
        {"name":"Torneo para experimentados","min_points":75,"max_points":100},
        {"name":"Gran Torneo","min_points":100,"max_points":150},
    ]
    for t in tournaments:
        for p in players:
            p[6]
            print("{} tiene {}".format(p[0], p[6]))
            print("El torneo requiere minimo {} y {} para competir".format(t["min_points"], t["max_points"]))
            if t["min_points"] <= p[6] <= t["max_points"]: print("Tiene permitido jugarlo")
            else: print("No tiene permitido jugarlo")


def showStats():
    players = loadPlayers()
    total_players = smartContract.functions.getPlayersLength().call()
    print("Jugadores totales:", total_players)

    labels = 'Aces', 'Winners', 'Double faults', 'Unforced errors'
    plt.figure('Métricas')
    plt.subplot(421)
    plt.title("{} (W:{},L:{},P:{})".format(players[0][0],players[0][4],players[0][5],players[0][6]))
    sizes = [players[0][7], players[0][8], players[0][9], players[0][10]]
    plt.pie(sizes, labels=labels, autopct='%1.0f')
    plt.subplot(424)
    plt.title("{} (W:{},L:{},P:{})".format(players[1][0],players[1][4],players[1][5],players[1][6]))
    sizes = [players[1][7], players[1][8], players[1][9], players[1][10]]
    plt.pie(sizes, labels=labels, autopct='%1.0f')
    plt.subplot(425)
    plt.title("{} (W:{},L:{},P:{})".format(players[2][0],players[2][4],players[2][5],players[2][6]))
    sizes = [players[2][7], players[2][8], players[2][9], players[2][10]]
    plt.pie(sizes, labels=labels, autopct='%1.0f')
    plt.subplot(428)
    plt.title("{} (W:{},L:{},P:{})".format(players[3][0],players[3][4],players[3][5],players[3][6]))
    sizes = [players[3][7], players[3][8], players[3][9], players[3][10]]
    plt.pie(sizes, labels=labels, autopct='%1.0f')

    plt.show()


initSimulation()
checkTournaments()
showStats()